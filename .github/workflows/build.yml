name: Build Tagtool
run-name: ${{ github.actor }} Running Tagtool build.
on: [push]
jobs:
  build-tagtool:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      IMAGE_NAME: tjsrowe/prisma-generic
      PRISMA_IMAGE: tjsrowe/prisma-generic:${{ github.sha }}

    steps:
    - name: Check out repositofy code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master

    - name: Install jq
      run: sudo apt-get install jq

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      if: ${{ github.actor != 'dependabot[bot]' }}
      uses: aws-actions/amazon-ecr-login@v2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
      with:
        registry-type: public

    - name: Get the current version of Prisma from package.json
      id: get-prisma-version
      env:
        REGISTRY_PREFIX: ${{ github.actor != 'dependabot[bot]' && format('{0}/', steps.login-ecr-public.outputs.registry) || ''}}
      run: |
        PRISMA_VERSION=$(jq -r '.. | objects | select(has("node_modules/prisma")) | ."node_modules/prisma".version' package-lock.json)
        IMAGE_NAME_HASH=${{ env.IMAGE_NAME }}:${{ github.sha }}
        IMAGE_NAME_VERSION=${{ env.IMAGE_NAME }}:$PRISMA_VERSION

        echo "PRISMA_VERSION=$PRISMA_VERSION" >> $GITHUB_OUTPUT

        echo "ECR_IMAGE_HASH=${{ env.REGISTRY_PREFIX }}$IMAGE_NAME_HASH" >> $GITHUB_OUTPUT
        echo "ECR_IMAGE_VERSION=${{ env.REGISTRY_PREFIX }}$IMAGE_NAME_VERSION" >> $GITHUB_OUTPUT
  
    - name: Build and push prisma image to ECR Public
      uses: docker/build-push-action@v6
      env:
        ECR_IMAGE_HASH: ${{ steps.get-prisma-version.outputs.ECR_IMAGE_HASH }}
        ECR_IMAGE_VERSION: ${{ steps.get-prisma-version.outputs.ECR_IMAGE_VERSION }}
      with:
        context: .
        builder: ${{ steps.buildx.outputs.name }}
        file: Dockerfile
        push: ${{ github.actor != 'dependabot[bot]' }}
        tags: |
          ${{ env.ECR_IMAGE_HASH }}
          ${{ env.ECR_IMAGE_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
